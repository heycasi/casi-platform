// src/lib/multilingual.ts - Comprehensive Language Support
export interface LanguageDetection {
  language: string
  confidence: number
  isQuestion: boolean
  sentiment: 'positive' | 'negative' | 'neutral'
  questionType?: string
  sentimentReason?: string
}

// Question words for different languages
const questionWords = {
  english: ['what', 'how', 'when', 'where', 'why', 'who', 'which', 'whose', 'whom'],
  spanish: ['qu√©', 'c√≥mo', 'cu√°ndo', 'd√≥nde', 'por qu√©', 'qui√©n', 'cu√°l', 'cuyo'],
  french: ['quoi', 'comment', 'quand', 'o√π', 'pourquoi', 'qui', 'quel', 'dont'],
  german: ['was', 'wie', 'wann', 'wo', 'warum', 'wer', 'welche', 'wessen'],
  portuguese: ['o que', 'como', 'quando', 'onde', 'por que', 'quem', 'qual', 'cujo'],
  italian: ['cosa', 'come', 'quando', 'dove', 'perch√©', 'chi', 'quale', 'cui'],
  dutch: ['wat', 'hoe', 'wanneer', 'waar', 'waarom', 'wie', 'welke', 'wiens'],
  japanese: ['‰Ωï', '„Å©„ÅÜ', '„ÅÑ„Å§', '„Å©„Åì', '„Å™„Åú', '„Å†„Çå', '„Å©„ÅÆ', '„Å©„Çå'],
  korean: ['Î≠ê', 'Ïñ¥ÎñªÍ≤å', 'Ïñ∏Ï†ú', 'Ïñ¥Îîî', 'Ïôú', 'ÎàÑÍµ¨', 'Ïñ¥Îäê', 'Î¨¥Ïóá'],
  chinese: ['‰ªÄ‰πà', 'ÊÄé‰πà', '‰ªÄ‰πàÊó∂ÂÄô', 'Âì™Èáå', '‰∏∫‰ªÄ‰πà', 'Ë∞Å', 'Âì™‰∏™', 'Â§öÂ∞ë'],
  russian: ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '—á–µ–π'],
  arabic: ['ŸÖÿß', 'ŸÉŸäŸÅ', 'ŸÖÿ™Ÿâ', 'ÿ£ŸäŸÜ', 'ŸÑŸÖÿßÿ∞ÿß', 'ŸÖŸÜ', 'ÿ£Ÿä', 'ŸÖÿßÿ∞ÿß'],
  hindi: ['‡§ï‡•ç‡§Ø‡§æ', '‡§ï‡•à‡§∏‡•á', '‡§ï‡§¨', '‡§ï‡§π‡§æ‡§Å', '‡§ï‡•ç‡§Ø‡•ã‡§Ç', '‡§ï‡•å‡§®', '‡§ï‡•å‡§® ‡§∏‡§æ', '‡§ï‡§ø‡§§‡§®‡§æ']
}

// Positive words for sentiment analysis
const positiveWords = {
  english: ['good', 'great', 'awesome', 'amazing', 'love', 'best', 'cool', 'nice', 'perfect', 'excellent'],
  spanish: ['bueno', 'genial', 'incre√≠ble', 'asombroso', 'amor', 'mejor', 'guay', 'agradable', 'perfecto'],
  french: ['bon', 'g√©nial', 'incroyable', '√©tonnant', 'amour', 'meilleur', 'cool', 'sympa', 'parfait'],
  german: ['gut', 'toll', 'unglaublich', 'erstaunlich', 'liebe', 'beste', 'cool', 'sch√∂n', 'perfekt'],
  portuguese: ['bom', '√≥timo', 'incr√≠vel', 'surpreendente', 'amor', 'melhor', 'legal', 'agrad√°vel', 'perfeito'],
  italian: ['buono', 'fantastico', 'incredibile', 'sorprendente', 'amore', 'migliore', 'figo', 'carino', 'perfetto'],
  dutch: ['goed', 'geweldig', 'ongelooflijk', 'verbazingwekkend', 'liefde', 'beste', 'cool', 'leuk', 'perfect'],
  japanese: ['ËâØ„ÅÑ', '„Åô„Åî„ÅÑ', '‰ø°„Åò„Çâ„Çå„Å™„ÅÑ', 'È©ö„Åè„Åπ„Åç', 'ÊÑõ', 'ÊúÄÈ´ò', '„ÇØ„Éº„É´', 'Á¥†Êïµ', 'ÂÆåÁíß'],
  korean: ['Ï¢ãÏùÄ', 'ÎåÄÎã®Ìïú', 'ÎØøÏùÑ Ïàò ÏóÜÎäî', 'ÎÜÄÎùºÏö¥', 'ÏÇ¨Îûë', 'ÏµúÍ≥†', 'Î©ãÏßÑ', 'Ï¢ãÏïÑ', 'ÏôÑÎ≤ΩÌïú'],
  chinese: ['Â•Ω', 'Â§™Ê£í‰∫Ü', 'Èöæ‰ª•ÁΩÆ‰ø°', 'ÊÉä‰∫∫', 'Áà±', 'ÊúÄÂ•Ω', 'ÈÖ∑', '‰∏çÈîô', 'ÂÆåÁæé'],
  russian: ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ', '–ª—é–±–æ–≤—å', '–ª—É—á—à–∏–π', '–∫—Ä—É—Ç–æ', '–º–∏–ª–æ', '–∏–¥–µ–∞–ª—å–Ω–æ'],
  arabic: ['ÿ¨ŸäÿØ', 'ÿ±ÿßÿ¶ÿπ', 'ŸÑÿß ŸäÿµÿØŸÇ', 'ŸÖÿØŸáÿ¥', 'ÿ≠ÿ®', 'ÿ£ŸÅÿ∂ŸÑ', 'ÿ±ÿßÿ¶ÿπ', 'ŸÑÿ∑ŸäŸÅ', 'ŸÖÿ´ÿßŸÑŸä'],
  hindi: ['‡§Ö‡§ö‡•ç‡§õ‡§æ', '‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ', '‡§Ö‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø', '‡§Ü‡§∂‡•ç‡§ö‡§∞‡•ç‡§Ø‡§ú‡§®‡§ï', '‡§™‡•ç‡§∞‡•á‡§Æ', '‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ', '‡§ï‡•Ç‡§≤', '‡§Ö‡§ö‡•ç‡§õ‡§æ', '‡§™‡§∞‡§´‡•á‡§ï‡•ç‡§ü']
}

// Negative words for sentiment analysis
const negativeWords = {
  english: ['bad', 'terrible', 'awful', 'hate', 'worst', 'sucks', 'boring', 'stupid', 'annoying'],
  spanish: ['malo', 'terrible', 'horrible', 'odio', 'peor', 'apesta', 'aburrido', 'est√∫pido', 'molesto'],
  french: ['mauvais', 'terrible', 'affreux', 'd√©teste', 'pire', 'nul', 'ennuyeux', 'stupide', 'aga√ßant'],
  german: ['schlecht', 'schrecklich', 'furchtbar', 'hasse', 'schlechteste', 'nervt', 'langweilig', 'dumm', 'nervig'],
  portuguese: ['ruim', 'terr√≠vel', 'horr√≠vel', '√≥dio', 'pior', 'p√©ssimo', 'chato', 'est√∫pido', 'irritante'],
  italian: ['cattivo', 'terribile', 'orribile', 'odio', 'peggiore', 'fa schifo', 'noioso', 'stupido', 'fastidioso'],
  dutch: ['slecht', 'verschrikkelijk', 'afschuwelijk', 'haat', 'slechtste', 'zuigt', 'saai', 'dom', 'vervelend'],
  japanese: ['ÊÇ™„ÅÑ', '„Å≤„Å©„ÅÑ', 'ÊúÄÊÇ™', 'Â´å„ÅÑ', 'ÊúÄÊÇ™', '„Å§„Åæ„Çâ„Å™„ÅÑ', '„Å∞„Åã', '„ÅÜ„Åñ„ÅÑ'],
  korean: ['ÎÇòÏÅú', 'ÎÅîÏ∞çÌïú', 'ÏµúÏïÖ', 'Ïã´Ïñ¥', 'ÏµúÏïÖ', 'ÏßÄÎ£®Ìïú', 'Î∞îÎ≥¥', 'ÏßúÏ¶ùÎÇòÎäî'],
  chinese: ['Âùè', 'ÂèØÊÄï', 'Á≥üÁ≥ï', 'ËÆ®Âéå', 'ÊúÄÂ∑Æ', 'Êó†ËÅä', 'ÊÑöË†¢', 'ÁÉ¶‰∫∫'],
  russian: ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ö—É–¥—à–∏–π', '–æ—Ç—Å—Ç–æ–π', '—Å–∫—É—á–Ω–æ', '–≥–ª—É–ø–æ', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç'],
  arabic: ['ÿ≥Ÿäÿ°', 'ŸÅÿ∏Ÿäÿπ', 'ŸÖÿ±Ÿàÿπ', 'ÿ£ŸÉÿ±Ÿá', 'ÿ£ÿ≥Ÿàÿ£', 'ŸÖŸÖŸÑ', 'ÿ∫ÿ®Ÿä', 'ŸÖÿ≤ÿπÿ¨'],
  hindi: ['‡§¨‡•Å‡§∞‡§æ', '‡§≠‡§Ø‡§æ‡§®‡§ï', '‡§ò‡•É‡§£‡§ø‡§§', '‡§®‡§´‡§∞‡§§', '‡§∏‡§¨‡§∏‡•á ‡§ñ‡§∞‡§æ‡§¨', '‡§¨‡•ã‡§∞‡§ø‡§Ç‡§ó', '‡§¨‡•á‡§µ‡§ï‡•Ç‡§´', '‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ']
}

// Language patterns for detection
const languagePatterns = {
  spanish: /[√±√°√©√≠√≥√∫√º]/,
  french: /[√†√¢√§√ß√©√®√™√´√Ø√Æ√¥√π√ª√º√ø]/,
  german: /[√§√∂√º√ü]/,
  portuguese: /[√£√°√†√¢√©√™√≠√≥√¥√µ√∫√ß]/,
  italian: /[√†√®√©√¨√≠√Æ√≤√≥√π]/,
  russian: /[–∞-—è—ë]/,
  arabic: /[\u0600-\u06FF]/,
  japanese: /[„Å≤„Çâ„Åå„Å™„Ç´„Çø„Ç´„Éä‰∏Ä-ÈæØ]/,
  korean: /[Í∞Ä-Ìû£]/,
  chinese: /[\u4e00-\u9fff]/,
  hindi: /[\u0900-\u097F]/
}

export function detectLanguage(text: string): string {
  const lowerText = text.toLowerCase()
  
  // Check for specific language patterns
  for (const [language, pattern] of Object.entries(languagePatterns)) {
    if (pattern.test(text)) {
      return language
    }
  }
  
  // Check for language-specific question words
  for (const [language, words] of Object.entries(questionWords)) {
    if (language === 'english') continue // Check English last
    for (const word of words) {
      if (lowerText.includes(word.toLowerCase())) {
        return language
      }
    }
  }
  
  // Default to English
  return 'english'
}

export function isQuestion(text: string, language: string): boolean {
  const lowerText = text.toLowerCase()
  
  // Universal question mark check
  if (text.includes('?') || text.includes('Ôºü')) {
    return true
  }
  
  // Language-specific question word check
  const words = questionWords[language as keyof typeof questionWords] || questionWords.english
  return words.some(word => lowerText.includes(word.toLowerCase()))
}

export function analyzeSentiment(text: string, language: string): 'positive' | 'negative' | 'neutral' {
  const lowerText = text.toLowerCase()
  
  // Get language-specific sentiment words
  const positive = positiveWords[language as keyof typeof positiveWords] || positiveWords.english
  const negative = negativeWords[language as keyof typeof negativeWords] || negativeWords.english
  
  // Count positive and negative words
  let positiveCount = 0
  let negativeCount = 0
  
  positive.forEach(word => {
    if (lowerText.includes(word.toLowerCase())) {
      positiveCount++
    }
  })
  
  negative.forEach(word => {
    if (lowerText.includes(word.toLowerCase())) {
      negativeCount++
    }
  })
  
  // Check for universal emoji sentiment
  const positiveEmojis = ['üòä', 'üòç', 'üî•', 'üëç', '‚ù§Ô∏è', 'üíñ', 'üéâ', '‚ú®', 'üòÇ', 'üí™']
  const negativeEmojis = ['üò¢', 'üò†', 'üëé', 'üíî', 'üòû', 'üò§', 'ü§Æ', 'üí©', 'üò°', 'üò≠']
  
  positiveEmojis.forEach(emoji => {
    if (text.includes(emoji)) {
      positiveCount += 2 // Emojis weight more
    }
  })
  
  negativeEmojis.forEach(emoji => {
    if (text.includes(emoji)) {
      negativeCount += 2
    }
  })
  
  if (positiveCount > negativeCount) return 'positive'
  if (negativeCount > positiveCount) return 'negative'
  return 'neutral'
}

export function getQuestionType(text: string, language: string): string {
  const lowerText = text.toLowerCase()
  const words = questionWords[language as keyof typeof questionWords] || questionWords.english
  
  // Map question words to types
  const typeMap: { [key: string]: string } = {
    // What/Qu√©/Quoi/Was/O que/Cosa/Wat/‰Ωï/Î≠ê/‰ªÄ‰πà/—á—Ç–æ/ŸÖÿß/‡§ï‡•ç‡§Ø‡§æ
    'what': 'explanation',
    'qu√©': 'explanation',
    'quoi': 'explanation', 
    'was': 'explanation',
    'o que': 'explanation',
    'cosa': 'explanation',
    'wat': 'explanation',
    '‰Ωï': 'explanation',
    'Î≠ê': 'explanation',
    '‰ªÄ‰πà': 'explanation',
    '—á—Ç–æ': 'explanation',
    'ŸÖÿß': 'explanation',
    '‡§ï‡•ç‡§Ø‡§æ': 'explanation',
    
    // How/C√≥mo/Comment/Wie/Como/Come/Hoe/„Å©„ÅÜ/Ïñ¥ÎñªÍ≤å/ÊÄé‰πà/–∫–∞–∫/ŸÉŸäŸÅ/‡§ï‡•à‡§∏‡•á
    'how': 'instruction',
    'c√≥mo': 'instruction',
    'comment': 'instruction',
    'wie': 'instruction',
    'como': 'instruction',
    'come': 'instruction',
    'hoe': 'instruction',
    '„Å©„ÅÜ': 'instruction',
    'Ïñ¥ÎñªÍ≤å': 'instruction',
    'ÊÄé‰πà': 'instruction',
    '–∫–∞–∫': 'instruction',
    'ŸÉŸäŸÅ': 'instruction',
    '‡§ï‡•à‡§∏‡•á': 'instruction',
    
    // Where/D√≥nde/O√π/Wo/Onde/Dove/Waar/„Å©„Åì/Ïñ¥Îîî/Âì™Èáå/–≥–¥–µ/ÿ£ŸäŸÜ/‡§ï‡§π‡§æ‡§Å
    'where': 'location',
    'd√≥nde': 'location',
    'o√π': 'location',
    'wo': 'location',
    'onde': 'location',
    'dove': 'location',
    'waar': 'location',
    '„Å©„Åì': 'location',
    'Ïñ¥Îîî': 'location',
    'Âì™Èáå': 'location',
    '–≥–¥–µ': 'location',
    'ÿ£ŸäŸÜ': 'location',
    '‡§ï‡§π‡§æ‡§Å': 'location'
  }
  
  for (const word of words) {
    if (lowerText.includes(word.toLowerCase())) {
      return typeMap[word.toLowerCase()] || 'general'
    }
  }
  
  return 'general'
}

export function analyzeMessage(text: string): LanguageDetection {
  const language = detectLanguage(text)
  const isQuestionResult = isQuestion(text, language)
  const sentiment = analyzeSentiment(text, language)
  const questionType = isQuestionResult ? getQuestionType(text, language) : undefined
  
  // Calculate confidence based on detection certainty
  let confidence = 0.7 // Base confidence
  
  // Increase confidence for specific patterns
  if (languagePatterns[language as keyof typeof languagePatterns]?.test(text)) {
    confidence += 0.2
  }
  
  if (isQuestionResult && text.includes('?')) {
    confidence += 0.1
  }
  
  // Generate sentiment reason
  let sentimentReason = ''
  if (sentiment === 'positive') {
    sentimentReason = 'Contains positive words or emojis'
  } else if (sentiment === 'negative') {
    sentimentReason = 'Contains negative words or emojis'
  } else {
    sentimentReason = 'Neutral tone detected'
  }
  
  return {
    language,
    confidence: Math.min(confidence, 1.0),
    isQuestion: isQuestionResult,
    sentiment,
    questionType,
    sentimentReason
  }
}
